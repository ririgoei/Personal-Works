Project 2: BST and AVL Tree - Instructions
CS 146-Anna Shaverdian
By: Bendik Svalastog and Riadiani Marcelita

Our program consists of four .java classes, in addition to the TreePrinter.java class:

1) BinarySearchTree.java, to build our Binary Search Tree.
2) AVLTree.java, to build our AVL tree.
3) BinaryNode.java, to build our tree's node(s).
4) BSTMain.java, to compile and run our results.

Every tree-building and execution of our program is done at the class BSTMain.java. When our program is opened in an IDE,
the user can just run the program, and our BSTMain is immediately executed. The BSTMain.java consists of four parts:

1) Part I of the assignment: BST.
- We generate random integers from 10-99 and insert these numbers to our BST until the tree reaches height 5.
- We print the tree by using TreePrinter.java
- We continuously remove the root of the tree until it is empty, printing the tree after each deletion.


2) Part I of the assignment: AVL tree.
- We generate 35 random integers from 10-99 and insert these numbers to our AVL tree.
- We print the tree by using TreePrinter.java. Every rotation the tree does to balance itself will be printed, saying the type of rotation
done and the node that was rotated. The printed tree will only show the already-balanced tree.
- We continuously remove the root of the tree until it is empty, printing the tree after each deletion.


3) Part II of the assignment: AVL tree Search and Insert runtimes.
- We generate n-random integers, ranging from 1 to n-1, to insert to our AVL tree.
- We generate n-random integers, ranging from 1 to n-1, to search in our AVL tree.
- We print the runtime/how long it takes for the AVL tree to do the insertion and search, in milliseconds.


4) Part II of the assignment: BST Search and Insert runtimes.
- We generate n-random integers, ranging from 1 to n-1, to insert to our BST.
- We generate n-random integers, ranging from 1 to n-1, to search in our BST.
- We print runtime/how long it takes for the BST to do the insertion and search, in milliseconds.